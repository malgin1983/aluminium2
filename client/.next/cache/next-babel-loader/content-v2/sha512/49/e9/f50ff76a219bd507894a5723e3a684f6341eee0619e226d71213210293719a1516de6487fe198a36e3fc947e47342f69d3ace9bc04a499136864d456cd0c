{"ast":null,"code":"import _regeneratorRuntime from \"D:/Projects/next-nest-postgrees-docker/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/Projects/next-nest-postgrees-docker/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\nvar initialState = {\n  value: 0,\n  status: 'idle'\n};\nexport var incrementAsync = createAsyncThunk('counter/fetchCount', /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(amount) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetchCount(amount);\n\n          case 2:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response.data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\nexport var counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialState,\n  reducers: {\n    increment: function increment(state) {\n      state.value += 1;\n    },\n    decrement: function decrement(state) {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: function incrementByAmount(state, action) {\n      state.value += action.payload;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(incrementAsync.pending, function (state) {\n      state.status = 'loading';\n    }).addCase(incrementAsync.fulfilled, function (state, action) {\n      state.status = 'idle';\n      state.value += action.payload;\n    });\n  }\n});\nvar _counterSlice$actions = counterSlice.actions,\n    increment = _counterSlice$actions.increment,\n    decrement = _counterSlice$actions.decrement;\nexport { increment, decrement };","map":{"version":3,"sources":["D:/Projects/next-nest-postgrees-docker/client/src/features/counter/counterSlice.ts"],"names":["createAsyncThunk","createSlice","fetchCount","initialState","value","status","incrementAsync","amount","response","data","counterSlice","name","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions"],"mappings":";;AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA6D,kBAA7D;AAGA,SAASC,UAAT,QAA2B,cAA3B;AAOA,IAAMC,YAA0B,GAAG;AACjCC,EAAAA,KAAK,EAAE,CAD0B;AAEjCC,EAAAA,MAAM,EAAE;AAFyB,CAAnC;AAKA,OAAO,IAAMC,cAAc,GAAGN,gBAAgB,CAC5C,oBAD4C;AAAA,sEAE5C,iBAAOO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACyBL,UAAU,CAACK,MAAD,CADnC;;AAAA;AACQC,YAAAA,QADR;AAAA,6CAGSA,QAAQ,CAACC,IAHlB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAF4C;;AAAA;AAAA;AAAA;AAAA,IAAvC;AASP,OAAO,IAAMC,YAAY,GAAGT,WAAW,CAAC;AACtCU,EAAAA,IAAI,EAAE,SADgC;AAEtCR,EAAAA,YAAY,EAAZA,YAFsC;AAGtCS,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE,mBAACC,KAAD,EAAW;AACpBA,MAAAA,KAAK,CAACV,KAAN,IAAe,CAAf;AACD,KAHO;AAIRW,IAAAA,SAAS,EAAE,mBAACD,KAAD,EAAW;AACpBA,MAAAA,KAAK,CAACV,KAAN,IAAe,CAAf;AACD,KANO;AAOR;AACAY,IAAAA,iBAAiB,EAAE,2BAACF,KAAD,EAAQG,MAAR,EAA0C;AAC3DH,MAAAA,KAAK,CAACV,KAAN,IAAea,MAAM,CAACC,OAAtB;AACD;AAVO,GAH4B;AAetC;AACA;AACAC,EAAAA,aAAa,EAAE,uBAACC,OAAD,EAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWf,cAAc,CAACgB,OAD1B,EACmC,UAACR,KAAD,EAAW;AAC1CA,MAAAA,KAAK,CAACT,MAAN,GAAe,SAAf;AACD,KAHH,EAIGgB,OAJH,CAIWf,cAAc,CAACiB,SAJ1B,EAIqC,UAACT,KAAD,EAAQG,MAAR,EAAmB;AACpDH,MAAAA,KAAK,CAACT,MAAN,GAAe,MAAf;AACAS,MAAAA,KAAK,CAACV,KAAN,IAAea,MAAM,CAACC,OAAtB;AACD,KAPH;AAQD;AA1BqC,CAAD,CAAhC;4BA6BiCR,YAAY,CAACc,O;IAAtCX,S,yBAAAA,S;IAAWE,S,yBAAAA,S","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\n\n\nimport { fetchCount } from './counterAPI'\n\nexport interface CounterState {\n  value: number\n  status: 'idle' | 'loading' | 'failed'\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n}\n\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount)\n    // The value we return becomes the `fulfilled` action payload\n    return response.data\n  }\n)\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: (state) => {\n      state.value += 1\n    },\n    decrement: (state) => {\n      state.value -= 1\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading'\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle'\n        state.value += action.payload\n      })\n  },\n})\n\nexport const { increment, decrement } = counterSlice.actions\n\n"]},"metadata":{},"sourceType":"module"}